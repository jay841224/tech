{"posts":[{"title":"Resilience4j Bulkhead 隔艙機制全解析與實戰","text":"隔艙（Bulkhead）源自航海術語，用來將船體分隔成多個艙室，防止某處進水而沉沒。在軟體系統中，我們也可以透過「隔艙機制」，將功能或資源切分，避免故障或資源耗盡時，整體系統「沉沒」。本文將從隔艙的三大目的說起，帶你瞭解 Resilience4j 的兩種 Bulkhead 實作，並示範在 Spring Boot 中快速上手。 一、隔艙的三大目的 隔離故障將系統資源劃分成多個「艙室」，當某個區域出問題時，不會蔓延到其他區域，確保整體可用性。 限制併發為特定功能設定最大併發數；當達到上限後，請求要麼等待、要麼直接拋出例外，避免線程被長時間佔用。 保護資源不被耗盡防止某段程式碼耗盡整體線程或連線池，導致所有服務癱瘓。通常會與斷路器（Circuit Breaker）、限流器（Rate Limiter）等容錯機制配合，提升系統穩定度。 二、Resilience4j 的兩種隔艙實作Resilience4j 提供兩種 Bulkhead 模式，底層機制各有差異，依需求選擇最合適的方式。 1. SemaphoreBulkhead 機制：使用信號量（Semaphore）限制同時執行的執行緒數量。 注意：不會建立獨立執行緒池，所有執行緒由使用者原有池提供，需自行確保池大小。 主要設定屬性： 屬性 預設值 說明 maxConcurrentCalls 25 允許的最大併發執行數 maxWaitDuration 0 當 Bulkhead 飽和時，執行緒可阻塞的最長等待時間 2. FixedThreadPoolBulkhead 機制：內建獨立執行緒池，並使用佇列（Queue）緩衝多餘請求。 主要設定屬性： 屬性 預設值 說明 maxThreadPoolSize availableProcessors() 執行緒池最大大小 coreThreadPoolSize availableProcessors() - 1 執行緒池核心大小 queueCapacity 100 任務佇列容量 keepAliveDuration 20 ms 超過核心執行緒數時，閒置執行緒在被回收前的最大閒置時間 writableStackTraceEnabled true Bulkhead 拋出例外時是否輸出完整堆疊追蹤；false 時只輸出單行錯誤訊息 三、在 Spring Boot 中快速上手與斷路器 (Circuit Breaker) 設定方式類似，透過 application.yml（或 properties）定義隔艙參數： 123456789101112resilience4j: bulkhead: configs: default: max-concurrent-calls: 10 max-wait-duration: 500ms instances: bulkheadA: base-config: default bulkheadB: base-config: default max-concurrent-calls: 5 在程式碼中，只要在方法上加上 @Bulkhead 標註，即可套用指定設定： 123456789101112import io.github.resilience4j.bulkhead.annotation.Bulkhead;import org.springframework.stereotype.Service;@Servicepublic class BackendService { @Bulkhead(name = &quot;bulkheadA&quot;) public String processTask() { // 模擬後端處理邏輯 return &quot;backendC ok&quot;; }} 上述範例中，processTask() 的最大併發數量即受 bulkheadA 設定限制，超過時便等待或拋例外，保護系統資源不被過度占用。 透過隔艙（Bulkhead）機制，我們能有效隔離故障、限制併發並保護關鍵資源，搭配斷路器與限流器，為微服務架構注入更強韌的穩定性。希望這篇筆記能幫助你快速掌握 Resilience4j 的 Bulkhead 實作，並靈活運用於專案中！","link":"/tech/2025/05/18/Java-CircuitBreaker/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/tech/2025/05/14/hello-world/"}],"tags":[{"name":"Java","slug":"Java","link":"/tech/tags/Java/"},{"name":"Spring Boot","slug":"Spring-Boot","link":"/tech/tags/Spring-Boot/"},{"name":"Resilience4j","slug":"Resilience4j","link":"/tech/tags/Resilience4j/"},{"name":"微服務","slug":"微服務","link":"/tech/tags/%E5%BE%AE%E6%9C%8D%E5%8B%99/"},{"name":"隔艙","slug":"隔艙","link":"/tech/tags/%E9%9A%94%E8%89%99/"},{"name":"Bulkhead","slug":"Bulkhead","link":"/tech/tags/Bulkhead/"}],"categories":[],"pages":[]}